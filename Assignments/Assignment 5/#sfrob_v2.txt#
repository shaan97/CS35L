For the sfrobu program, we are outputting the number of comparisons made by the
program. Through this, we can figure out a relation between the number of words
in the file (separated by spaces) and the number of comparisons made (calls to
frobcmp). This gives us this trend:

Number of Words	          Comparisons
10     	    		       20
100				     521
1000					     8292
10000						     127804
100000							     1626620

From this, we can observe the obvious increasing trend but we can also
mathematically calculate the trend and predict values for greater number of
words. The relation we get could be either exponential where the comparisons are
numwords^1.3, or linear where comparisons are about 16-17 times the numwords.

Next, we performed a time-based test on three programs with the same output
(tested using diff). The three programs tested were sfrobu (using unbuffered
writes and reads), sfrob (using buffered getchar and putchar) and sfrobs (using
bash script i.e. tr and sort). These were the results on multiple files:

10000 line .txt file:

 sfrobu	      	  sfrob		 sfrobs
						
real 0.04					real 0.01	real 0.01 
user 0.00					user 0.01	user 0.01
sys 0.03					sys 0.00	sys 0.00

rt.jar (a very huge file with upto a million lines):

 sfrobu	           sfrob       sfrobs

real 37.17     real 5.52     real 1.09 
user 6.39      user 5.37     user 0.97
sys 30.78      sys 0.14	          sys 0.43

From the results, we can clearly see that the script file is the fastest
performer, whereas the unbuffered sfrobu program is the slowest. The main
difference comes from the system call time which is under a second for the
script and the buffered program and can take up to 30 seconds for the
unbuffered. The unbuffered program reads and writes data byte by byte calling
read() and write() for every character. In comparison, the sfrob file stores a
limit of data on buffers and saves up on number of system calls. Lastly, the
script file is the most optimized program and doesn't require creation of extra
variables, thereby reducing on the real and user time.
